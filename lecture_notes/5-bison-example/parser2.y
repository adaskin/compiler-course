/* Infix notation calculator. */

%{
  #include <math.h>
  #include <stdio.h>
  int yylex (void);
  void yyerror (char const *);
%}

/* Bison declarations. */
%define api.value.type {double}
%token NUM
%left '-' '+'
%left '*' '/'
%precedence NEG   /* negation--unary minus */
%right '^'        /* exponentiation */

%% /* The grammar follows. */
input:
  %empty
| input line
;

line:
  '\n'
| exp '\n'  { printf ("\t%.10g\n", $1); }
;

exp:
  NUM
| exp '+' exp        { $$ = $1 + $3;      }
| exp '-' exp        { $$ = $1 - $3;      }
| exp '*' exp        { $$ = $1 * $3;      }
| exp '/' exp        { $$ = $1 / $3;      }
| '-' exp  %prec NEG { $$ = -$2;          }
| exp '^' exp        { $$ = pow ($1, $3); }
| '(' exp ')'        { $$ = $2;           }
;

%%

void yyerror(char const *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int main(void) {
    printf("Infix Calculator - Enter expressions or Ctrl-D to exit\n");
    yyparse();
    return 0;
}

/*
yylex()
Purpose: Called by parser to get next token
Returns: Integer token code, Sets yylval with token value
Source: Generated by Flex from lexer.l

yyparse()
Purpose: Main parsing function
Behavior: Calls yylex() repeatedly, applies grammar rules
Returns: 0 on success, 1 on syntax error
Source: Generated by Bison from parser.y

yylval
Type: YYSTYPE (defined by %union in Bison)
Purpose: Carries semantic values from lexer to parser
Usage: Flex sets it, Bison accesses via $1, $2, etc.

yyerror(char *msg)
Purpose: Error reporting function
Called by: Parser when syntax errors occur
Must be implemented by user
*/