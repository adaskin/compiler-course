%{
#include "parser.tab.h"  // Generated by bison, contains token definitions
#include <stdlib.h>
void yyerror(char *);
%}

%%

[0-9]+(\.[0-9]+)?  { yylval.dval = atof(yytext); return NUMBER; }
"+"                { return ADD; }
"-"                { return SUB; }
"*"                { return MUL; }
"/"                { return DIV; }
"("                { return LPAREN; }
")"                { return RPAREN; }
\n                 { return EOL; }
[ \t]              ; /* ignore whitespace */
.                  { yyerror("Invalid character"); }

%%

int yywrap(void) {
    return 1;
}

/* 
Explanations
yytext: Contains the matched token text
yylval: Global variable to pass semantic values to parser
yywrap(): Called when EOF reached - return 1 to stop parsing
Patterns use regex to match tokens
*/